pub enum IoErrorKind {
    // an entity was not found, typically a file
    NotFound,
    // operation lacked necessary privileges to complete
    PermissionDenied,
    // connection refused by remote server
    ConnectionRefused,
    // connection reset by remote server
    ConnectionReset,
    // remote host is not reachable
    HostUnreachable,
    // network containing remote host is not reachable
    NetworkUnreachable,
    // connection terminated by remote server
    ConnectionAborted,
    // network operation failed due to not being connected
    NotConnected,
    // socket address already in use elsewhere
    AddrInUse,
    // nonexistent interface requested or address not local
    AddrNotAvailable,
    // system's networking is down
    NetworkDown,
    // operation failed because a pipe was closed
    BrokenPipe,
    // entity already exists, often a file
    AlreadyExists,
    // operation needs to block but was requested not to
    WouldBlock,
    // filesystem object is not a directory when expected
    NotADirectory,
    // filesystem object is a directory when not expected
    IsADirectory,
    // non-empty directory where empty was expected
    DirectoryNotEmpty,
    // write attempted on read-only filesystem
    ReadOnlyFilesystem,
    // filesystem loop or excessive symlink chain depth
    FilesystemLoop,
    // network file handle became invalid
    StaleNetworkFileHandle,
    // parameter was incorrect
    InvalidInput,
    // operation encountered malformed input data
    InvalidData,
    // i/o operation's timeout expired
    TimedOut,
    // write operation returned zero bytes written
    WriteZero,
    // storage is full
    StorageFull,
    // seeking attempted on non-seekable file
    NotSeekable,
    // resource quota was exceeded
    QuotaExceeded,
    // file exceeds allowed size limit
    FileTooLarge,
    // resource is busy
    ResourceBusy,
    // executable file is currently in use
    ExecutableFileBusy,
    // file locking would result in deadlock
    Deadlock,
    // cross-device link or rename attempted
    CrossesDevices,
    // too many hardlinks to same file
    TooManyLinks,
    // filename invalid or exceeds length limit
    InvalidFilename,
    // program argument list too long
    ArgumentListTooLong,
    // operation was interrupted
    Interrupted,
    // operation unsupported on this platform
    Unsupported,
    // end of file reached prematurely
    UnexpectedEof,
    // operation failed to allocate enough memory
    OutOfMemory,
    // partially successful operation, check later
    InProgress,
    // custom error not matching other kinds
    Other(u32),
}

pub struct IoError {
    kind: IoErrorKind,
    message: string,

    fn new(kind: IoErrorKind, message: string) IoError {
        return IoError { .kind = kind, .message = message };
    }

    fn fromOsError(error: u32) IoError {
        match error {
            2 => return IoError::new(IoErrorKind::NotFound, "The system cannot find the file specified."),
            5 => return IoError::new(IoErrorKind::PermissionDenied, "Access is denied."),
            6 => return IoError::new(IoErrorKind::InvalidInput, "The handle is invalid."),
            13 => return IoError::new(IoErrorKind::InvalidData, "The data is invalid."),
            14 => return IoError::new(IoErrorKind::OutOfMemory, "Not enough storage is available."),
            21 => return IoError::new(IoErrorKind::IsADirectory, "Is a directory."),
            22 => return IoError::new(IoErrorKind::InvalidInput, "Invalid argument."),
            30 => return IoError::new(IoErrorKind::ReadOnlyFilesystem, "Read-only file system."),
            36 => return IoError::new(IoErrorKind::FileTooLarge, "File too large."),
            38 => return IoError::new(IoErrorKind::UnexpectedEof, "Reached end of file unexpectedly."),
            39 => return IoError::new(IoErrorKind::DirectoryNotEmpty, "Directory not empty."),
            40 => return IoError::new(IoErrorKind::CrossesDevices, "Cross-device link operation attempted."),
            47 => return IoError::new(IoErrorKind::TooManyLinks, "Too many links."),
            67 => return IoError::new(IoErrorKind::AddrInUse, "Address already in use."),
            83 => return IoError::new(IoErrorKind::HostUnreachable, "Host is unreachable."),
            101 => return IoError::new(IoErrorKind::NetworkUnreachable, "Network is unreachable."),
            103 => return IoError::new(IoErrorKind::ConnectionAborted, "Connection aborted."),
            104 => return IoError::new(IoErrorKind::ConnectionReset, "Connection reset by peer."),
            107 => return IoError::new(IoErrorKind::NotConnected, "Transport endpoint is not connected."),
            109 => return IoError::new(IoErrorKind::BrokenPipe, "Broken pipe."),
            111 => return IoError::new(IoErrorKind::ConnectionRefused, "Connection refused."),
            112 => return IoError::new(IoErrorKind::StorageFull, "No space left on device."),
            114 => return IoError::new(IoErrorKind::Deadlock, "Resource deadlock would occur."),
            122 => return IoError::new(IoErrorKind::QuotaExceeded, "Quota exceeded."),
            150 => return IoError::new(IoErrorKind::FilesystemLoop, "Too many levels of symbolic links."),
            183 => return IoError::new(IoErrorKind::AlreadyExists, "File exists."),
            232 => return IoError::new(IoErrorKind::WriteZero, "Write returned zero bytes."),
            10004 => return IoError::new(IoErrorKind::Interrupted, "Operation interrupted."),
            10035 => return IoError::new(IoErrorKind::WouldBlock, "Operation would block."),
            10060 => return IoError::new(IoErrorKind::TimedOut, "Connection timed out."),
            10061 => return IoError::new(IoErrorKind::ConnectionRefused, "Connection refused."),
            10093 => return IoError::new(IoErrorKind::NetworkDown, "Network is down."),
            // default case for any other error code
            else => return IoError::new(IoErrorKind::Other(error), "Unknown error occurred.")
        }
    }
}