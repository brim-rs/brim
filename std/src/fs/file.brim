use { HANDLE, DWORD, OVERLAPPED, OVERLAPPED_0, OVERLAPPED_0_0, BOOL } from "../os/windows.brim"
use { IoError } from "../io/error.brim";
use { WriteFile } from "../os/windows/kernel32.brim";

pub type HandleTy = match @os() {
    "windows" => HANDLE,
    "linux" => i32,
    "macos" => i32,
    else => i32
};

pub struct Handle {
    inner: HandleTy

    fn write(self: &Handle, data: const u8[], offset: u64?) usize!IoError {
        let bytes_written: DWORD = 0;
        let overlapped: OVERLAPPED? = offset ?
             @some(OVERLAPPED {
                .Internal = 0,
                .InternalHigh = 0,
                .Anonymous = OVERLAPPED_0 {
                    .Anonymous = OVERLAPPED_0_0 {
                        .Offset = @cast(offset!, DWORD),
                        .OffsetHigh = @cast((offset! >> 32), DWORD),
                    },
                },
                .hEvent = @none()
            }) : @none();

        if WriteFile(self.inner, data.ptr, data.len, @some(&bytes_written), &overlapped) == 0 {}

        return bytes_written;
    }
}

pub struct File {
    handle: Handle,

    fn write(self: &File, data: const u8[]) usize!IoError {
        return self.handle.write(data, @none());
    }
}
