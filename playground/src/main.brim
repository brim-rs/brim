use { File, getStdErr } from "std";

struct Vec2<T> {
    x: T,
    y: T,

    fn new(x: T, y: T) Vec2<T> {
        return Vec2 { .x = x, .y = y };
    }
}

enum Val {
    Int(i32),
    Float(f64),
    String(string),
    Empty,
}

pub fn testFn(val: Val) Val {
    return Val::String("Hello, World!");
}

pub fn main() {
    // Here val is any
    let val: any = 42;
    // so first we need to cast val to default numeric type which is i32
    // and only then we can perform standard cast to u32
    let xy = @cast(@anyCast(val, i32), u32);

    let stderr = getStdErr();
    //let usize = stderr.write(b"dw");

    let int_val = Val::Int(42);
    let empty_variant = Val::Empty();
    let x = testFn(int_val);
};
